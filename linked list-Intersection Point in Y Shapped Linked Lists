/*___________________________________________________________________________________________________

Given two singly linked lists of size N and M, write a program to get the point where two linked lists intersect each other.

 

Example 1:

Input:
LinkList1 = 3->6->9->common
LinkList2 = 10->common
common = 15->30->NULL
Output: 15


Example 2:

Input: 
Linked List 1 = 4->1->common
Linked List 2 = 5->6->1->common
common = 8->4->5->NULL
Output: 8
Explanation: 

4              5
|              |
1              6
 \             /
  8   -----  1 
   |
   4
   |
  5
  |
  NULL    
  
Expected Time Complexity: O(N+M)
Expected Auxiliary Space: O(1)



_____________________________________________________________________________________________________*/



class Intersect
{
    //Function to find intersection point in Y shaped Linked Lists.
	int intersectPoint(Node head1, Node head2)
	{
         // code here
        Node temp1=head1;
        int count1=1;
        while(temp1.next!=null){
            temp1=temp1.next;
            count1++;
        }
        Node temp2=head2;
        int count2=1;
        while(temp2.next!=null){
            temp2=temp2.next;
            count2++;
        }
        temp1=head1;temp2=head2;
        int diff=0;
        if(count1>count2){
            diff=count1-count2;
            for(int i=0;i<diff;i++){
                temp1=temp1.next;
            }
        }else if(count2>count1){
            diff=count2-count1;
            for(int i=0;i<diff;i++){
                temp2=temp2.next;
            }
        }
        while(temp1!=temp2){
            temp1=temp1.next;
            temp2=temp2.next;
        }
            if(temp1!=null){
                return temp1.data;
            }else{
                return -1;
            }
	}
}
