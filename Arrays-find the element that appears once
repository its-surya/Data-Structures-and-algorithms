/*______________________________________________________________________________________________

Given a sorted array A[] of N positive integers having all the numbers occurring exactly twice, except for one number which will occur only once. Find the number occurring only once.

Example 1:

Input:
N = 5
A = {1, 1, 2, 5, 5}
Output: 2
Explanation: 
Since 2 occurs once, while
other numbers occur twice, 
2 is the answer.
Example 2:

Input:
N = 7
A = {2, 2, 5, 5, 20, 30, 30}
Output: 20
Explanation:
Since 20 occurs once, while
other numbers occur twice, 
20 is the answer.
Your Task:
You don't need to read input or print anything. Your task is to complete the function search() which takes two arguments(array A and integer N) and returns the number occurring only once.

Expected Time Complexity: O(Log(N)).
Expected Auxiliary Space: O(1).


____________________________________________________________________________________________________________*/

class Sol
{
    public static int find (int low,int high,int arr[]){
        if(arr[low]==arr[high]){
            return arr[low];
        }
        int mid=(low+high)/2;
        if(mid%2==0){
            if(arr[mid]==arr[mid+1]){
                return find(mid+2,high,arr);
            }else{
                return find(low,mid,arr);
            }
        }else{
            if(arr[mid]==arr[mid-1]){
                return find(mid+1,high,arr);
            }else{
                return find(low,mid-1,arr);
            }
        }
        
    }
    public static int search(int A[], int N)
    {
        // your code here
        return find(0,N-1,A);
    }
}
