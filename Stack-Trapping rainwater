/*______________________________________________________________________________________________________________
Given n non-negative integers representing an elevation map where the width of each bar is 1,
compute how much water it can trap after raining.

 

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. 
In this case, 6 units of rain water (blue section) are being trapped.
Example 2:

Input: height = [4,2,0,3,2,5]
Output: 9
 


___________________________________________________________________________________________________________________*/

class Solution {
    public int trap(int[] height) {
                int ans=0;
        Stack<Integer> s=new Stack<>();
        int n=height.length;
        for(int i=0;i<n;i++){
            while(!s.isEmpty() && height[s.peek()]<=height[i]){
                int rm=i;
                int curr=height[s.pop()];
                if(s.isEmpty())
                break;
                int lm=s.peek();
                
                int width=rm-lm-1;
                ans+=(Math.min(height[lm],height[rm])-curr)*width;
            }
            s.push(i);
            
        }
        return ans;
               
    }
}
