/*_________________________________________________________________________________________________
Given a binary matrix M of size n X m. Find the maximum area of a rectangle formed only of 1s in the given matrix.

Example 1:

Input:
n = 4, m = 4
M[][] = {{0 1 1 0},
         {1 1 1 1},
         {1 1 1 1},
         {1 1 0 0}}
Output: 8

Explanation: For the above test case the
matrix will look like
0 1 1 0
1 1 1 1
1 1 1 1
1 1 0 0
the max size rectangle is 
1 1 1 1
1 1 1 1
and area is 4 *2 = 8.


Your Task: 
Your task is to complete the function maxArea which returns the maximum size rectangle area in a binary-sub-matrix with all 1â€™s. 
The function takes 3 arguments the first argument is the Matrix M[ ] [ ] and the next two are two integers n and m which denotes the size of the matrix M. 

Expected Time Complexity : O(n*m)
Expected Auixiliary Space : O(m)


_________________________________________________________________________________________________*/

class Solution {
    public int maxArea(int M[][], int n, int m) {
        // add code here.
        int[] heights=new int[m];
        for(int i=0;i<m;i++){
            heights[i]=M[0][i];
        }
        int area=largestRectangleArea(heights);
        for(int i=1;i<n;i++){
            for(int j=0;j<m;j++){
                if(M[i][j]==1){
                    heights[j]++;
                }else{
                    heights[j]=0;
                }
            }
          area= Math.max(area,largestRectangleArea(heights)) ;  
        }
        return area;
        
    }
    public int largestRectangleArea(int[] heights) {
        Stack<Integer> s=new Stack<>();
        s.push(-1);
        int maxArea=0;
        for(int i=0;i<=heights.length;i++){
            int val= i==heights.length ? 0: heights[i];
            while(s.peek()!=-1 && heights[s.peek()]>=val ){
                int rm=i;
                int h=heights[s.pop()];
                int lm=s.peek();
                maxArea= Math.max(maxArea,h*(rm-lm-1));
            }
            s.push(i);
        }
        return maxArea;

        
    }

}
