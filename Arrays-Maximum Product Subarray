/*______________________________________________________________________________________________________________________________
Given an array Arr[] that contains N integers (may be positive, negative or zero). Find the product of the maximum product subarray.

Example 1:

Input:
N = 5
Arr[] = {6, -3, -10, 0, 2}
Output: 180
Explanation: Subarray with maximum product
is [6, -3, -10] which gives product as 180.
Example 2:

Input:
N = 6
Arr[] = {2, 3, 4, 5, -1, 0}
Output: 120
Explanation: Subarray with maximum product
is [2, 3, 4, 5] which gives product as 120.
Your Task:
You don't need to read input or print anything. Your task is to complete the function maxProduct() which takes the array of integers
arr and n as parameters and returns an integer denoting the answer.
Note: Use 64-bit integer data type to avoid overflow.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)


__________________________________________________________________________________________________________________________________________________*/

class Solution {
    // Function to find maximum product subarray
    long maxProduct(int[] arr, int n) {
        // code here
        long ma=arr[0],mi=arr[0],ans=arr[0];
        for(int i=1;i<n;i++){
            if(arr[i]<0){
                long temp=mi;
                mi=ma;
                ma=temp;
            }
            ma=Math.max(arr[i],arr[i]*ma);
            mi=Math.min(arr[i],arr[i]*mi);
            ans=Math.max(ans,ma);
        }
        return ans;
    }
}

